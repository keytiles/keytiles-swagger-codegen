{{#notNullJacksonAnnotation}}
@JsonInclude(JsonInclude.Include.NON_NULL)
{{/notNullJacksonAnnotation}}

{{#vendorExtensions.x-keytilescomputed-model-explanations.forTheClass}}
// @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-model-explanations.forTheClass}}
public class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{{#parcelableModel}}implements Parcelable {{#serializableModel}}, Serializable {{/serializableModel}}{{#interfaceModels}}{{#@first}}, {{/@first}}{{classname}}{{^@last}}, {{/@last}}{{#@last}} {{/@last}}{{/interfaceModels}}{{/parcelableModel}}{{^parcelableModel}}{{#serializableModel}}implements Serializable{{#interfaceModels}}{{#@first}}, {{/@first}}{{classname}}{{^@last}}, {{/@last}}{{#@last}} {{/@last}}{{/interfaceModels}}{{/serializableModel}}{{^serializableModel}}{{#interfaceModels}}{{#@first}}implements {{/@first}}{{classname}}{{^@last}}, {{/@last}}{{#@last}} {{/@last}}{{/interfaceModels}}{{/serializableModel}}{{/parcelableModel}}{
{{#serializableModel}}
  private static final long serialVersionUID = 1L;
{{/serializableModel}}

{{#privateFinalFields}}
{{#vendorExtensions.x-keytilescomputed-property-explanations.forProperty}}
  // @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-property-explanations.forProperty}}
    {{#baseItems this}}
    {{#isEnum}}
{{>modelInnerEnum}}
    {{/isEnum}}
    {{/baseItems}}
  {{#withXml}}
  // NOTE! these annotations might not work / be at wrong place! adjust pojo.mustache?
  {{#isXmlAttribute}}
  @XmlAttribute(name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
  {{/isXmlAttribute}}
  {{^isXmlAttribute}}
    {{^isContainer}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
    {{/isContainer}}
    {{#isContainer}}
  // Is a container wrapped={{isXmlWrapped}}
      {{#items}}
  // items.name={{name}} items.baseName={{baseName}} items.xmlName={{xmlName}} items.xmlNamespace={{xmlNamespace}}
  // items.example={{example}} items.type={{datatype}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/items}}
      {{#isXmlWrapped}}
  @XmlElementWrapper({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isXmlWrapped}}
    {{/isContainer}}
  {{/isXmlAttribute}}
  {{/withXml}}
  private final {{{datatypeWithEnum}}} {{name}};
{{/privateFinalFields}}

{{#privateFields}}
{{#vendorExtensions.x-keytilescomputed-property-explanations.forProperty}}
  // @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-property-explanations.forProperty}}
    {{#baseItems this}}
    {{#isEnum}}
{{>modelInnerEnum}}
    {{/isEnum}}
    {{/baseItems}}
  {{#withXml}}
  // NOTE! are these annotations at good place? adjust pojo.mustache?
  {{#isXmlAttribute}}
  @XmlAttribute(name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
  {{/isXmlAttribute}}
  {{^isXmlAttribute}}
    {{^isContainer}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
    {{/isContainer}}
    {{#isContainer}}
  // Is a container wrapped={{isXmlWrapped}}
      {{#items}}
  // items.name={{name}} items.baseName={{baseName}} items.xmlName={{xmlName}} items.xmlNamespace={{xmlNamespace}}
  // items.example={{example}} items.type={{datatype}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/items}}
      {{#isXmlWrapped}}
  @XmlElementWrapper({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isXmlWrapped}}
    {{/isContainer}}
  {{/isXmlAttribute}}
  {{/withXml}}
  {{#isContainer}}
  private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
  {{/isContainer}}
  {{^isContainer}}
  private {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
  {{/isContainer}}

  {{/privateFields}}

{{#publicFields}}
{{#vendorExtensions.x-keytilescomputed-property-explanations.forProperty}}
  // @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-property-explanations.forProperty}}
    {{#baseItems this}}
    {{#isEnum}}
{{>modelInnerEnum}}
    {{/isEnum}}
    {{/baseItems}}
  {{#jackson}}
    {{#vendorExtensions.x-is-discriminator-property}}
  @JsonTypeId
    {{/vendorExtensions.x-is-discriminator-property}}
    {{^vendorExtensions.x-is-discriminator-property}}
    {{#vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonInclude(Include.NON_DEFAULT)
    {{/vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonProperty("{{baseName}}")
    {{#withXml}}
      {{^isContainer}}
  @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isContainer}}
      {{#isContainer}}
        {{#isXmlWrapped}}
  // items.xmlName={{items.xmlName}}
  @JacksonXmlElementWrapper(useWrapping = {{isXmlWrapped}}, {{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#items.xmlName}}{{items.xmlName}}{{/items.xmlName}}{{^items.xmlName}}{{items.baseName}}{{/items.xmlName}}")
        {{/isXmlWrapped}}
      {{/isContainer}}
    {{/withXml}}
    {{/vendorExtensions.x-is-discriminator-property}}
  {{/jackson}}
  {{#withXml}}
  {{#isXmlAttribute}}
  @XmlAttribute(name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
  {{/isXmlAttribute}}
  {{^isXmlAttribute}}
    {{^isContainer}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
    {{/isContainer}}
    {{#isContainer}}
  // Is a container wrapped={{isXmlWrapped}}
      {{#items}}
  // items.name={{name}} items.baseName={{baseName}} items.xmlName={{xmlName}} items.xmlNamespace={{xmlNamespace}}
  // items.example={{example}} items.type={{datatype}}
  @XmlElement({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/items}}
      {{#isXmlWrapped}}
  @XmlElementWrapper({{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}name = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isXmlWrapped}}
    {{/isContainer}}
  {{/isXmlAttribute}}
  {{/withXml}}
  {{#gson}}
  @SerializedName("{{baseName}}")
  {{/gson}}
  {{#isContainer}}
  public {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
  {{/isContainer}}
  {{^isContainer}}
  public {{{datatypeWithEnum}}} {{name}} = {{{defaultValue}}};
  {{/isContainer}}

  {{/publicFields}}
  
{{#needsConstructor}}
{{#vendorExtensions.x-keytilescomputed-model-explanations.forConstructor}}
  // @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-model-explanations.forConstructor}}
{{#jackson}}
  @JsonCreator
{{/jackson}}
{{#gson}}
  // Hey! Probably we need something similar Gson based annotation like @JsonCreator for Jackson here?
{{/gson}}
  public {{classname}}({{{constructorCombinedArgs}}}) {
    super({{#each constructorSuperArgs}}{{#if @index}}, {{/if}}{{name}}{{/each}});
{{#constructorValidateNonNullArgs}}
    if({{name}} == null) {
      throw new IllegalArgumentException("'{{{name}}}' value can not be NULL");
    }
{{/constructorValidateNonNullArgs}}    
    {{#privateFinalFields}}
    this.{{name}} = {{name}};
    {{/privateFinalFields}}
    {{#constructorOwnFieldArgs}}
    this.{{name}} = {{name}};
    {{/constructorOwnFieldArgs}}
  }
{{/needsConstructor}}
  
  
{{#privateFinalFields}}
{{#vendorExtensions.x-keytilescomputed-property-explanations.forGetter}}
  // @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-property-explanations.forGetter}}
{{#useBeanValidation}}{{>beanValidation}}{{/useBeanValidation}}
{{#vendorExtensions.extraAnnotation}}
  {{{vendorExtensions.extraAnnotation}}}
{{/vendorExtensions.extraAnnotation}}
  {{#jackson}}
    {{#vendorExtensions.x-is-discriminator-property}}
  @JsonTypeId
    {{/vendorExtensions.x-is-discriminator-property}}
    {{^vendorExtensions.x-is-discriminator-property}}
    {{#vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonInclude(Include.NON_DEFAULT)
    {{/vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonProperty("{{baseName}}")
    {{#withXml}}
      {{^isContainer}}
  @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isContainer}}
      {{#isContainer}}
        {{#isXmlWrapped}}
  // items.xmlName={{items.xmlName}}
  @JacksonXmlElementWrapper(useWrapping = {{isXmlWrapped}}, {{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#items.xmlName}}{{items.xmlName}}{{/items.xmlName}}{{^items.xmlName}}{{items.baseName}}{{/items.xmlName}}")
        {{/isXmlWrapped}}
      {{/isContainer}}
    {{/withXml}}
    {{/vendorExtensions.x-is-discriminator-property}}
  {{/jackson}}
  {{#gson}}
  @SerializedName("{{baseName}}")
  {{/gson}}
  public {{{datatypeWithEnum}}} {{getter}}() {
    return {{name}};
  }
  {{/privateFinalFields}}
 
{{#privateFields}}
{{#vendorExtensions.x-keytilescomputed-property-explanations.forGetter}}
  // @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-property-explanations.forGetter}}
{{#vendorExtensions.extraAnnotation}}
  {{{vendorExtensions.extraAnnotation}}}
{{/vendorExtensions.extraAnnotation}}
  {{#jackson}}
    {{#vendorExtensions.x-is-discriminator-property}}
  @JsonTypeId
    {{/vendorExtensions.x-is-discriminator-property}}
    {{^vendorExtensions.x-is-discriminator-property}}
    {{#vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonInclude(Include.NON_DEFAULT)
    {{/vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonProperty("{{baseName}}")
    {{#withXml}}
      {{^isContainer}}
  @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isContainer}}
      {{#isContainer}}
        {{#isXmlWrapped}}
  // items.xmlName={{items.xmlName}}
  @JacksonXmlElementWrapper(useWrapping = {{isXmlWrapped}}, {{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#items.xmlName}}{{items.xmlName}}{{/items.xmlName}}{{^items.xmlName}}{{items.baseName}}{{/items.xmlName}}")
        {{/isXmlWrapped}}
      {{/isContainer}}
    {{/withXml}}
    {{/vendorExtensions.x-is-discriminator-property}}
  {{/jackson}}
  {{#gson}}
  @SerializedName("{{baseName}}")
  {{/gson}}
  public {{{datatypeWithEnum}}} {{getter}}() {
    return {{name}};
  }  
  {{^isReadOnly}}

{{#vendorExtensions.x-keytilescomputed-property-explanations.forSetter}}
  // @Generator: {{{explanationMessage}}} 
{{/vendorExtensions.x-keytilescomputed-property-explanations.forSetter}}
  {{#jackson}}
    {{#vendorExtensions.x-is-discriminator-property}}
  @JsonTypeId
    {{/vendorExtensions.x-is-discriminator-property}}
    {{^vendorExtensions.x-is-discriminator-property}}
    {{#vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonInclude(Include.NON_DEFAULT)
    {{/vendorExtensions.x-keytilescomputed-serialize-only-if-non-default}}
  @JsonProperty("{{baseName}}")
    {{#withXml}}
      {{^isContainer}}
  @JacksonXmlProperty({{#isXmlAttribute}}isAttribute = true, {{/isXmlAttribute}}{{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#xmlName}}{{xmlName}}{{/xmlName}}{{^xmlName}}{{baseName}}{{/xmlName}}")
      {{/isContainer}}
      {{#isContainer}}
        {{#isXmlWrapped}}
  // items.xmlName={{items.xmlName}}
  @JacksonXmlElementWrapper(useWrapping = {{isXmlWrapped}}, {{#xmlNamespace}}namespace="{{xmlNamespace}}", {{/xmlNamespace}}localName = "{{#items.xmlName}}{{items.xmlName}}{{/items.xmlName}}{{^items.xmlName}}{{items.baseName}}{{/items.xmlName}}")
        {{/isXmlWrapped}}
      {{/isContainer}}
    {{/withXml}}
    {{/vendorExtensions.x-is-discriminator-property}}
  {{/jackson}}
  {{#gson}}
  @SerializedName("{{baseName}}")
  {{/gson}}
  public void {{setter}}({{{datatypeWithEnum}}} {{name}}) {
{{^nullable}}
    if({{name}} == null) {
      throw new IllegalArgumentException("'{{name}}' value can not be NULL");
    }
{{/nullable}}
    this.{{name}} = {{name}};
  }
  {{/isReadOnly}}

{{/privateFields}}
{{^supportJava6}}
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }{{#hasVars}}
    {{classname}} {{classVarName}} = ({{classname}}) o;
    return {{#vars}}{{#isByteArray}}Arrays{{/isByteArray}}{{#isBinary}}Objects{{/isBinary}}{{^isByteArray}}{{^isBinary}}Objects{{/isBinary}}{{/isByteArray}}.equals(this.{{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
        {{/hasMore}}{{/vars}}{{#parent}} &&
        super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return {{#parent}}super.equals(o){{/parent}}{{^parent}}true{{/parent}};{{/hasVars}}
  }

  @Override
  public int hashCode() {
    return Objects.hash({{#vars}}{{^isByteArray}}{{^isBinary}}{{name}}{{/isBinary}}{{/isByteArray}}{{#isByteArray}}Arrays.hashCode({{name}}){{/isByteArray}}{{#isBinary}}Objects.hashCode({{name}}){{/isBinary}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
  }

{{/supportJava6}}
{{#supportJava6}}
  @Override
  public boolean equals(java.lang.Object o) {
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }{{#hasVars}}
    {{classname}} {{classVarName}} = ({{classname}}) o;
    return {{#vars}}ObjectUtils.equals(this.{{name}}, {{classVarName}}.{{name}}){{#hasMore}} &&
    {{/hasMore}}{{/vars}}{{#parent}} &&
    super.equals(o){{/parent}};{{/hasVars}}{{^hasVars}}
    return true;{{/hasVars}}
  }

  @Override
  public int hashCode() {
    return ObjectUtils.hashCodeMulti({{#vars}}{{name}}{{#hasMore}}, {{/hasMore}}{{/vars}}{{#parent}}{{#hasVars}}, {{/hasVars}}super.hashCode(){{/parent}});
  }

{{/supportJava6}}

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class {{classname}} {\n");
    {{#parent}}sb.append("    ").append(toIndentedString(super.toString())).append("\n");{{/parent}}
    {{#vars}}sb.append("    {{name}}: ").append(toIndentedString({{name}})).append("\n");
    {{/vars}}sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
