openapi: 3.0.1

info:
  version: '1.0'
  title: Test object definitions

paths: {}

components:

  schemas:
  
    ReferredObject:
      type: object
      properties:
        prop1:
          type: string
          nullable: true
          default: "buuu"
        prop2:
          type: integer
          default: 5  

    # this guy extends the previous (so it also will have a constructor passing over params to base)
    JsonSerializationTestSubclassClass:
      allOf:
      - $ref: 'imported-types.yaml#/components/schemas/JsonSerializationTestBaseClass'
      type: object
      required:
      - requiredBooleanField
      x-keytiles-serialize-only-if-non-default-properties:
      - outputIfNonDefaultString
      # in this class we turn on using simple datatypes
      x-keytiles-use-primitive-datatypes-if-possible: true
      properties:
        # this field will be renamed to Java standard - but in json should remain the same
        # since it has nothing special it will become a ppublic field simply
        unconventional_name_Field:
          type: integer
          nullable: true
          # let's enforce the renaming this way (should be default but still)
          x-keytiles-keep-property-name: false
        # this will be a public field as it has nothing special
        longField:
          type: integer
          format: int64
          nullable: true
        # and since this guy is required it will become a private final
        requiredBooleanField:
          type: boolean
          nullable: true
        # this field can not be NULL but has a default value - so will become a private field with getter/setter
        nonNullInteger:
          type: integer
          nullable: false
          default: 10
        # this field can not be NULL and does not have a good default value either - so will become a private field with getter/setter
        # and also part of the constructor
        nonNullNoDefaultDouble:
          type: number
          format: double
          nullable: false
        # with this field we can test the 'x-keytiles-serialize-only-if-non-default' feature
        outputIfNonDefaultString:
          type: string
          nullable: true
        
    # This class is just testing simple property level mappings
    # and does not declare any required or readOnly fields
    # however it is testing behavior of default values!
    SimpleFieldsClass:
      type: object
      x-keytiles-keep-property-names: true
      x-keytiles-serialize-only-if-non-default-properties:
      - unconventional_name_Field2
      properties:
        # this field should be renamed - as local 'x-keytiles-keep-property-name' tells it
        unconventional_name_Field1:
          type: integer
          nullable: true
          x-keytiles-keep-property-name: false
          description: unconventional_name_Field1 field description
        # this field should not be renamed - as it inherits 'x-keytiles-keep-property-names' from Object
        # field should get a @JsonInclude(Include.NON_DEFAULT) annotation
        unconventional_name_Field2:
          type: integer
          nullable: true
          description: unconventional_name_Field2 field description
        # to test it is mapped as long type
        longField:
          type: integer
          format: int64
          nullable: true
          description: longField field description
        longFieldWithDefault:
          type: integer
          format: int64
          default: 10
          nullable: true
          description: longFieldWithDefault field description
        # to test it is mapped as double type
        doubleField:
          type: number
          format: double
          nullable: true
          description: doubleField field description
        doubleFieldWithDefault:
          type: number
          format: double
          default: 10.2
          nullable: true
          description: doubleFieldWithDefault field description
        inlineEnumField:
          type: string
          nullable: true
          description: inlineEnumField field description
          enum: [ok, failed, warning]
          example: "ok | warning | failed"
        inlineEnumFieldWithDefault:
          type: string
          nullable: true
          description: inlineEnumFieldWithDefault field description
          enum: [ok, failed, warning]
          example: "ok | warning | failed"
          default: ok
        fruitEnumField:
          $ref: 'imported-types-2nd-level.yaml#/components/schemas/FruitEnum'
        # NOTE: this way is not really supported by OpenApi 3.0 spec...
        # defaults of enums are only working if you do it inline like 'inlineEnumFieldWithDefault'
        # so probably field remains NULL ... thats normal
        fruitEnumFieldWithDefault:
          $ref: 'imported-types.yaml#/components/schemas/FruitEnumWithDefault'
        primeEnumField:
          
          $ref: 'imported-types.yaml#/components/schemas/PrimeEnum'
        arrayField:
          type: array
          nullable: true
          description: 'arrayField field description'
          items:
            type: string
        arrayFieldWithDefault:
          type: array
          nullable: true
          description: 'arrayFieldWithDefault field description'
          default: ['a','b']
          items:
            type: string
        arrayFieldWithEmptyArrayDefault:
          type: array
          nullable: true
          description: 'arrayFieldWithEmptyArrayDefault field description'
          default: []
          items:
            type: string
        # NOTE: it looks this is externalized (unlike inline enum) by Java codegen...
        # see: SimpleFieldsClassInlineLangObjectField class
        inlineLangObjectField:
          type: object
          nullable: true
          description: inlineLangObjectField field description
          properties:
            id:
              type: integer
              minimum: 0
            langcode:
              type: string
            label:
              type: string

    # This class is based on 'SimpleFieldsClass'
    # except it is declaring all the fields 'nullable: false'
    NonNullableFieldsClass:
      type: object
      properties:
        # to test it is mapped as long type
        longField:
          type: integer
          format: int64
          nullable: false
          description: longField field description
        longFieldWithDefault:
          type: integer
          format: int64
          nullable: false
          default: 10
          description: longFieldWithDefault field description
        # to test it is mapped as double type
        doubleField:
          type: number
          format: double
          nullable: false
          description: doubleField field description
        doubleFieldWithDefault:
          type: number
          format: double
          nullable: false
          default: 10.2
          description: doubleFieldWithDefault field description
        inlineEnumField:
          type: string
          description: inlineEnumField field description
          nullable: false
          enum: [ok, failed, warning]
          example: "ok | warning | failed"
        inlineEnumFieldWithDefault:
          type: string
          description: inlineEnumFieldWithDefault field description
          nullable: false
          enum: [ok, failed, warning]
          example: "ok | warning | failed"
          default: ok
        primeEnumField:
          $ref: 'imported-types.yaml#/components/schemas/NonNullablePrimeEnum'
        arrayField:
          type: array
          description: 'arrayField field description'
          nullable: false
          items:
            type: string
        arrayFieldWithDefault:
          type: array
          description: 'arrayField field description'
          nullable: false
          default: ['a','b']
          items:
            type: string
        objectArrayFieldWithDefault:
          type: array
          description: 'object arrayField field description'
          nullable: false
          default:
          - prop1: "obj1"
            prop2: 5
          - prop1: "obj2"
            prop2: 15
          items:
            $ref: '#/components/schemas/ReferredObject'
        # NOTE: it looks this is externalized (unlike inline enum) by Java codegen...
        # see: SimpleFieldsClassInlineLangObjectField class
        inlineLangObjectField:
          type: object
          description: inlineLangObjectField field description
          nullable: false
          properties:
            id:
              type: integer
              minimum: 0
            langcode:
              type: string
            label:
              type: string
          
    # This one is testing deep imports working correctly if we have long inheritance
    CatAndDogResponseClass:
      allOf:
      - $ref: 'imported-types.yaml#/components/schemas/DogResponseClass'    
      type: object
      properties:
        cat:
          type: string


    # ===============
    # testing enum compositions
    # ===============

    LocalErrorCodes:
      type: string
      enum:
      - containerId_missing
      - error_code_1
      - error_code_2
      
    # what about oneOf, allOf ? what to do in that case? maybe do the same...
    ExtendedErrorCodesAnyOf:
      anyOf:
      - $ref: "#/components/schemas/LocalErrorCodes"
      - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes"
      nullable: true 

    ExtendedErrorCodesOneOf:
      oneOf:
      - $ref: "#/components/schemas/LocalErrorCodes"
      - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes" 

# for now we do not support this style so remove these
# otherwise model generation would kick a schema exception
#
#    ExtendedErrorCodesInlineAnyOf:
#      type: string
#      anyOf:
#      - enum:
#        - own_error_code_1
#        - own_error_code_2
#      - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes" 
#
#    ExtendedErrorCodesInlineOneOf:
#      type: string
#      oneOf:
#      - enum:
#        - own_error_code_1
#        - own_error_code_2
#      - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes" 
#
#    ExtendedErrorCodesInlineAllOf:
#      type: string
#      allOf:
#      - enum:
#        - own_error_code_1
#        - own_error_code_2
#      - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes" 

      
    ErrorResponseClass:
      type: object
      properties:
        errorCodeInplaceOneOf:
          oneOf:
          - $ref: "#/components/schemas/LocalErrorCodes"
          - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes"
          nullable: true
        errorCodeInplaceAnyOf:
          anyOf:
          - $ref: "#/components/schemas/LocalErrorCodes"
          - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes"
          nullable: true
        errorCodeArrayInplaceOneOf:
          type: array
          items:
            oneOf:
            - $ref: "#/components/schemas/LocalErrorCodes"
            - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes"
          nullable: true
        errorCodeArrayInplaceAnyOf:
          type: array
          items:
            anyOf:
            - $ref: "#/components/schemas/LocalErrorCodes"
            - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes"
          nullable: true
        extendedErrorCodesAnyOfField:
          $ref: "#/components/schemas/ExtendedErrorCodesAnyOf"
        extendedErrorCodesOneOfField:
          $ref: "#/components/schemas/ExtendedErrorCodesOneOf"
        extendedErrorCodesOneOfArrayField:
          type: array
          items:
            $ref: "#/components/schemas/ExtendedErrorCodesOneOf"
          nullable: true
# these models were commented out - ^^^ see above!
#        extendedErrorCodesInlineAnyOfField:
#          $ref: "#/components/schemas/ExtendedErrorCodesInlineAnyOf"
#        extendedErrorCodesInlineAnyOfArrayField:
#          type: array
#          items:
#            $ref: "#/components/schemas/ExtendedErrorCodesInlineAnyOf"
#          nullable: true
      

  
    ManagementEndpointLocalErrorCodes:
      type: string
      enum:
      - containerId_missing
      - containerId_invalid
      - containerData_missing
      - containerData_invalid
      - containerData_jsonDecodeFailed
      - userIdTerm_missing
      - userIdTerm_invalid
      - userData_missing
      - userData_invalid
      - userData_jsonDecodeFailed
      - passwordData_missing
      - passwordData_invalid
      - credentials

    ManagementEndpointErrorCodes:
      oneOf:
      - $ref: "#/components/schemas/ManagementEndpointLocalErrorCodes"
      - $ref: "imported-types.yaml#/components/schemas/CommonErrorCodes"
  
    ManagementEndpointProblemClass:
      type: object
      properties:
        errorCodes:
          type: array
          items:
            $ref: "#/components/schemas/ManagementEndpointErrorCodes"
          nullable: true
          
      